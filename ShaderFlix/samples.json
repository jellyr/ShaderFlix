{
  "Shaders_SAMPLE":
  [

{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "ldfGWn",
      "date": "1367026386",
      "viewed": 10396,
      "name": "Truchet Tentacles",
      "username": "WAHa_06x36",
      "description": "A 3D generalization of Truchet tiling, made out of anodized aluminium.\n\nNow even shinier!\n\n(A shader version of an effect from our old DS demo \"Heinrich-Siegfried Viktor\".)",
      "likes": 116,
      "published": 3,
      "flags": 1,
      "tags": [ "raymarching", "distancefield", "truchet" ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 24,
            "src": "\/presets\/cube02_0.jpg",
            "ctype": "cubemap",
            "channel": 0,
            "sampler": {
              "filter": "linear",
              "wrap": "clamp",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            }
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "float rand(vec3 r) { return fract(sin(dot(r.xy,vec2(1.38984*sin(r.z),1.13233*cos(r.z))))*653758.5453); }\n\n#define Iterations 64\n#define Thickness 0.1\n#define SuperQuadPower 8.0\n#define Fisheye 0.5\n\nfloat truchetarc(vec3 pos)\n{\n\tfloat r=length(pos.xy);\n\/\/\treturn max(abs(r-0.5),abs(pos.z-0.5))-Thickness;\n\/\/\treturn length(vec2(r-0.5,pos.z-0.5))-Thickness;\n\treturn pow(pow(abs(r-0.5),SuperQuadPower)+pow(abs(pos.z-0.5),SuperQuadPower),1.0\/SuperQuadPower)-Thickness;\n}\n\nfloat truchetcell(vec3 pos)\n{\n\treturn min(min(\n\ttruchetarc(pos),\n\ttruchetarc(vec3(pos.z,1.0-pos.x,pos.y))),\n\ttruchetarc(vec3(1.0-pos.y,1.0-pos.z,pos.x)));\n}\n\nfloat distfunc(vec3 pos)\n{\n\tvec3 cellpos=fract(pos);\n\tvec3 gridpos=floor(pos);\n\n\tfloat rnd=rand(gridpos);\n\n\tif(rnd<1.0\/8.0) return truchetcell(vec3(cellpos.x,cellpos.y,cellpos.z));\n\telse if(rnd<2.0\/8.0) return truchetcell(vec3(cellpos.x,1.0-cellpos.y,cellpos.z));\n\telse if(rnd<3.0\/8.0) return truchetcell(vec3(1.0-cellpos.x,cellpos.y,cellpos.z));\n\telse if(rnd<4.0\/8.0) return truchetcell(vec3(1.0-cellpos.x,1.0-cellpos.y,cellpos.z));\n\telse if(rnd<5.0\/8.0) return truchetcell(vec3(cellpos.y,cellpos.x,cellpos.z));\n\telse if(rnd<6.0\/8.0) return truchetcell(vec3(cellpos.y,1.0-cellpos.x,cellpos.z));\n\telse if(rnd<7.0\/8.0) return truchetcell(vec3(1.0-cellpos.y,cellpos.x,cellpos.z));\n\telse  return truchetcell(vec3(1.0-cellpos.y,1.0-cellpos.x,cellpos.z));\n}\n\nvec3 gradient(vec3 pos)\n{\n\tconst float eps=0.0001;\n\tfloat mid=distfunc(pos);\n\treturn vec3(\n\tdistfunc(pos+vec3(eps,0.0,0.0))-mid,\n\tdistfunc(pos+vec3(0.0,eps,0.0))-mid,\n\tdistfunc(pos+vec3(0.0,0.0,eps))-mid);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 ray_dir=fragRayDir;\n\tvec3 ray_pos=fragRayOri;\n\n\tfloat i=float(Iterations);\n\tfor(int j=0;j<Iterations;j++)\n\t{\n\t\tfloat dist=distfunc(ray_pos);\n\t\tray_pos+=dist*ray_dir;\n\n\t\tif(abs(dist)<0.001) { i=float(j); break; }\n\t}\n\n\tvec3 normal=normalize(gradient(ray_pos));\n\n\tfloat ao=1.0-i\/float(Iterations);\n\tfloat what=pow(max(0.0,dot(normal,-ray_dir)),2.0);\n\tfloat light=ao*what*1.4;\n\n\tfloat z=ray_pos.z\/2.0;\n\/\/\tvec3 col=(sin(vec3(z,z+pi\/3.0,z+pi*2.0\/3.0))+2.0)\/3.0;\n\tvec3 col=(cos(ray_pos\/2.0)+2.0)\/3.0;\n\n\tvec3 reflected=reflect(ray_dir,normal);\n\tvec3 env=textureCube(iChannel0,reflected*reflected*reflected).xyz;\n\n\tfragColor=vec4(col*light+0.1*env,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float pi=3.141592;\n\n\tvec2 coords=(2.0*fragCoord.xy-iResolution.xy)\/length(iResolution.xy);\n\n\tfloat a=iGlobalTime\/3.0;\n\tmat3 m=mat3(\n\t0.0,1.0,0.0,\n\t-sin(a),0.0,cos(a),\n\tcos(a),0.0,sin(a));\n\tm*=m;\n\tm*=m;\n\n\tvec3 ray_dir=m*normalize(vec3(1.4*coords,-1.0+Fisheye*(coords.x*coords.x+coords.y*coords.y)));\n\n\tfloat t=iGlobalTime\/3.0;\n\tvec3 ray_pos=vec3(\n    2.0*(sin(t+sin(2.0*t)\/2.0)\/2.0+0.5),\n    2.0*(sin(t-sin(2.0*t)\/2.0-pi\/2.0)\/2.0+0.5),\n    2.0*((-2.0*(t-sin(4.0*t)\/4.0)\/pi)+0.5+0.5));\n\n    mainVR(fragColor,fragCoord,ray_pos,ray_dir);\n\n   \tfloat vignette=pow(1.0-length(coords),0.3);\n\tfragColor.xyz*=vec3(vignette);\n}\n",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
},


{
  "Shader": {
    "ver": "0.1",
    "info": {
      "id": "ltXXzr",
      "date": "1438735776",
      "viewed": 2936,
      "name": "[SIG15] Fallout",
      "username": "vgs",
      "description": "Let's open the vault door to SIG15! This shader is still WIP! Please inform me if the shader is broken in your machine.",
      "likes": 26,
      "published": 3,
      "flags": 0,
      "tags": [ "raymarching", "cave", "vault", "bethesda", "obsidian", "door" ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": 3,
            "src": "\/presets\/tex02.jpg",
            "ctype": "texture",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            }
          },
          {
            "id": 7,
            "src": "\/presets\/tex06.jpg",
            "ctype": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            }
          },
          {
            "id": 10,
            "src": "\/presets\/tex09.jpg",
            "ctype": "texture",
            "channel": 2,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            }
          }
        ],
        "outputs": [
          {
            "id": 37,
            "channel": 0
          }
        ],
        "code": "\/\/ Created by Vinicius Graciano Santos - vgs\/2015\n\/\/ This shader is WIP!!!\n\/\/ I still need to model the inside of the vault,\n\/\/ adjust the lighting (it's too dark), and rotate the noise function to hide some artifacts.\n\n#define STEPS 128\n#define FAR 50.0\n#define PIX (1.0\/iResolution.x)\n#define PI 3.14159265359\n\n#define DOOR_QUEUE 10.\n\nfloat iGT = mod(iGlobalTime, DOOR_QUEUE+12.0);\n\n\/\/ Dave Hoskins' hash: https:\/\/www.shadertoy.com\/view\/4djSRW\nfloat hash(float p) { \n    vec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n\/\/ iq's 3D noise: https:\/\/www.shadertoy.com\/view\/4sfGzS\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nfloat fbm(vec3 x) {\n    float f = 0.0;\n    f += 0.5*noise(x); x = 2.0*x;\n    f += 0.25*noise(x); x = 2.0*x;\n    f += 0.125*noise(x); x = 2.0*x;\n    f += 0.0625*noise(x);\n    return f\/0.9375;\n}\n\n\/\/ Distance functions (thanks again to iq)\nfloat box( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nvec2 rep(vec2 p) {\n    float a = atan(p.y, p.x);\n    a = mod(a, 2.0*PI\/9.) - PI\/9.;\n    return length(p)*vec2(cos(a), sin(a));\n}\n\nfloat cylinder(vec3 p, vec2 h) {\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec3 doorAnim(vec3 p) {\n    vec3 zero = vec3(0.0);\n    p += mix(zero, vec3(0.0, 0.0, 0.8), smoothstep(DOOR_QUEUE, DOOR_QUEUE+3.0, iGT));\n    p += mix(zero, vec3(2.0, 0.0, 0.0), smoothstep(DOOR_QUEUE+5.0, DOOR_QUEUE+10.0, iGT));\n    \n    float a = mix(0.0, PI\/2.5, smoothstep(DOOR_QUEUE+5.0, DOOR_QUEUE+10.0, iGT));\n    p.xy = cos(a)*p.xy + sin(a)*vec2(p.y, -p.x);\n    return p;\n}\n\nfloat torus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat door(vec3 p) {\n    vec3 q = vec3(p.x, p.y, p.z-0.22);\n    float d = cylinder(p, vec2(1., .25));\n    d = min(d, torus(q, vec2(0.4, 0.05)));\n    d = min(d, torus(q, vec2(0.9, 0.05))); \n    p.xy = rep(p.xy); q = vec3(p.z-0.22, p.y, -p.x+0.65);\n    d = min(d, cylinder(q, vec2(0.05, 0.25))); \n    p.x += 0.5*abs(p.y) - 1.;\n    return min(d, box(p, vec3(0.15, 0.15, 0.25)));\n}\n\nfloat frame(vec3 p) {\n    float d = cylinder(p, vec2(1.2, .3)); p.z *= 0.7;\n    return max(d, -door(p));\n}\n\nvec2 track(float z) {\n\tfloat x = 2.5*cos(0.2*z);\n\tfloat y = 2.0*cos(0.2*z) - 0.5*sin(0.8*z - 2.0);\n\treturn vec2(x, y) - vec2(2.3, 2.3);\n}\n\nfloat cave(vec3 p) {\n    p.xy += track(p.z);\n\tconst float k = 4.0;\n\treturn max(1.6-pow(pow(abs(0.5*p.x), k) + pow(abs(p.y), k), 1.0\/k) + 0.35*noise(p), -p.z);\n}\n\nfloat rail(vec3 p, float s) {\n    p = vec3(p.x, p.z, -p.y);\n    vec3 q = vec3(-p.z, p.y, p.x);\n    float d = cylinder(q, vec2(0.02, s-0.25));\n    q.x -= 0.25;\n    d = min(d, cylinder(q, vec2(0.02, s-0.25)));\n    p.x = clamp(p.x, -s, s);\n    p.x = mod(p.x, 0.5) - 0.25;\n    return min(d, cylinder(p, vec2(0.02, 0.25)));\n}\n\nfloat rails(vec3 p) {\n    vec3 pa = p + vec3(0.88, 0.25, 1.52);\n    float d = rail(pa, 1.0);\n    pa = vec3(pa.z, pa.y, -pa.x) + vec3(1.75, 0.0, 0.75);\n    d = min(d, rail(pa, 2.0));\n    pa.z += 1.55; \n    return min(d, rail(pa, 3.0));\n}\n\nfloat vault(vec3 p) {\n    \/\/ walls and hole\n    vec3 pa = p + vec3(0.0, 0.0, 5.0);\n    float d = max(box(pa, vec3(4.5, 3.0, 5.2)), -box(pa, vec3(3.0, 1.51, 5.0)));\n    d = max(d, -cylinder(p, vec2(1.2)));\n            \n    \/\/ upper left floor\n    pa = p + vec3(1.0, 1.0, 4.0);\n    d = min(d, box(pa, vec3(0.9, 0.5, 2.5)));\n    \n    \/\/ upper right floor\n    pa = p + vec3(-2.4, 1.0, 3.5);\n    d = min(d, box(pa, vec3(1.0, 0.5, 3.0)));\n\t\n    \/\/ stairs\n    pa = p + vec3(-0.75, 1.0, 7.1);\n    d = min(d, box(pa, vec3(2.65, 0.5, 1.0)));\n    pa.yz -= vec2(.12, 1.1); d = min(d, box(pa, vec3(2.0, 0.125, 0.1)));\n    pa.yz -= vec2(-0.25, 0.2); d = min(d, box(pa, vec3(2.0, 0.125, 0.1)));\n    pa.yz -= vec2(-0.25, 0.2); d = min(d, box(pa, vec3(2.0, 0.125, 0.1)));\n    \n    return d;        \n}\n\nfloat alarm(vec3 p) {\n    p += vec3(1.0, -1.0, -0.3);\n    return cylinder(p, vec2(0.1));\n}\n\nfloat map(vec3 p) {\n    float d = min(door(doorAnim(p)), frame(p));\n    d = min(min(d, vault(p)), rails(p));\n    return min(min(d, cave(p)), alarm(p));\n}\n\n\/\/ IFtastic DE version for material selection\nint mapID(vec3 p) {\n    int id = -1;\n    float d = FAR, mind = FAR;\n    \n    d = door(doorAnim(p)); if (d < mind) {id = 0, mind = d;}\n    d = frame(p); if (d < mind) {id = 1, mind = d;}\n    d = rails(p); if (d < mind) {id = 1, mind = d;}\n    d = vault(p); if (d < mind) {id = 2, mind = d;}\n    d = cave(p);  if (d < mind) {id = 3, mind = d;}\n    d = alarm(p); if (d < mind) {id = 1, mind = d;}\n    \n    return id;\n}\n\nvec3 normal(vec3 p) {\n    vec2 q = vec2(0., PIX);\n    return normalize(vec3(map(p+q.yxx) - map(p-q.yxx),\n                \t\t  map(p+q.xyx) - map(p-q.xyx),\n                \t\t  map(p+q.xxy) - map(p-q.xxy)));\n}\n\nstruct Material {\n    float rough;\n    vec3 alb, refl;\n};\n\nfloat box2D(vec2 p, vec2 b) {\n\treturn smoothstep(b.x, b.x-0.01, abs(p.x))*smoothstep(b.y, b.y-0.01, abs(p.y));\n}\n\nfloat circle(vec2 p, float r1, float w) {\n    return smoothstep(r1, r1-0.01, length(p)) - smoothstep(r1-w, r1-w-0.01, length(vec2(p.x, 0.65*p.y)));\n}\n\nfloat text(vec2 uv) {\n    uv.x += 0.03;\n    \/\/ one\n    vec2 st = uv + vec2(0.1, 0.01);\n    float d = box2D(st, vec2(0.04, 0.2));\n    st += vec2(0.05, -0.1);\n    st = st*cos(0.25*PI) + vec2(-st.y, st.x)*sin(0.25*PI);\n    d = max(d, box2D(st, vec2(0.04, 0.08)));\n    \n    \/\/ five\n    st = uv - vec2(0.15, 0.15);\n    d = max(d, box2D(st, vec2(0.12, 0.04))); st += vec2(0.01, 0.215);\n    d = max(d, circle(st, 0.14, 0.08)); st += vec2(0.08, -0.13);\n    st = st*cos(0.45*PI) + vec2(st.y, -st.x)*sin(0.45*PI);\n    d = max(d, box2D(st, vec2(0.12, 0.04))); st += vec2(0.12, 0.02);\n    d -= box2D(st, vec2(0.05, 0.1));\n    \n    return clamp(d, 0.0, 1.0);\n}\n\nvec3 cubeMap(in sampler2D s, vec3 p, vec3 n) {\n    vec3 a = texture2D(s, 0.1*p.yz).rgb;\n    vec3 b = texture2D(s, 0.1*p.xz).rgb;\n    vec3 c = texture2D(s, 0.1*p.xy).rgb;\n    n = abs(n);\n    return (a*n.x + b*n.y + c*n.z)\/(n.x+n.y+n.z);   \n}\n\nvec3 bumpMap(in sampler2D s, vec3 p, vec3 n, float c) {\n    vec2 q = vec2(0.0, 0.4);\n\tvec3 grad = -(vec3(cubeMap(s,p+q.yxx, n).b, cubeMap(s,p+q.xyx, n).b, cubeMap(s,p+q.xxy, n).b)-c)\/q.y;\n    vec3 t = grad - n*dot(grad, n);\n    return normalize(n - t);\n}\n\nMaterial getMaterial(vec3 p, inout vec3 n) {\n    int id = mapID(p);\n    vec3 gamma = vec3(2.2);\n    \n\tvec3 yellow = pow(vec3(255., 255., 93.)\/255., gamma);\n    vec3 blue = pow(vec3(136., 169., 184.)\/255., gamma);\n    \n    if (id == 0) p = doorAnim(p);\n        \n    vec3 tex = cubeMap(iChannel0, p, n);\n    n = bumpMap(iChannel0, p, n, tex.b);\n    tex *= 1.5;\n    \n    if (id == 1) {\n        return Material(60.0, yellow*tex, yellow*tex);\n    } else if (id == 2) {\n        tex *= blue;\n        if (n.y > 0.8) {\n            vec2 uv = fract(p.zx-0.5);\n            float k = uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y);\n    \t\tfloat col = 1.0-smoothstep(0.1, 0.12, pow(k, 0.5));\n    \t\tcol += 0.5*(sin(30.0*uv.x)+1.0)*(1.0-col);\n    \t\ttex *= col;\n        }\n    \treturn Material(30.0, tex, tex);\n    } else if (id == 3) {\n        vec3 tex2 = cubeMap(iChannel1, p, n);\n        vec3 tex3 = cubeMap(iChannel2, p, n);\n        float k = fbm(5.0*p);\n        tex = mix(tex, tex2, k); tex = mix(tex, tex3, k);\n        return Material(20.0, tex, vec3(1.0));\n    } else if (id == 0){\n        vec2 uv = p.xy;\n        tex = yellow*text(uv) + tex*blue;\n        return Material(60.0, tex, tex);\n    }\n    return Material(10.0, vec3(0.0, 1.0, 0.0), vec3(1.0));\n}\n\nfloat calcAO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.0;\n    for( int i=0; i<5; i++ ) {\n        float h = 0.01 + 0.21*float(i)\/5.0;\n        occ += (h-map(p + h*n));\n    }\n    return clamp( 1.0 - 2.5*occ\/5.0, 0.0, 1.0 );    \n}\n\nvec3 blinnPhong(in Material mat, vec3 view, vec3 n, vec3 light_col, vec3 l) {\n    vec3 h = normalize(l + view);\n    float dif = max(dot(n, l), 0.0);\n    float spe = pow(max(dot(n, h), 0.0), mat.rough);\n    return (mat.alb + mat.refl*spe)*dif*light_col;\n}\n\nvec3 shade(vec3 ro, vec3 rd, float t) {\n    vec3 p = ro + t*rd;\n    vec3 n = normal(p);\n    \n    Material mat = getMaterial(p, n);\n    float ao = calcAO(p, n);\n    vec3 col = vec3(0.0);\n    \n    \/\/ key light\n    vec3 alarm_pos = vec3(-1.0, 1.0, 0.5);\n    vec3 alarm_l = alarm_pos - p;\n    float alarm_decay = dot(alarm_l, alarm_l); alarm_l *= inversesqrt(alarm_decay);\n    vec3 alarm_col = vec3(1.5, 2.0, 1.0)*smoothstep(DOOR_QUEUE-4.0, DOOR_QUEUE-3.0, iGT);\n    alarm_col *= smoothstep(DOOR_QUEUE+11.0, DOOR_QUEUE+10.0, iGT);\n    alarm_col *= pow(abs(dot(alarm_l, vec3(cos(3.*iGT), sin(3.*iGT), 0.))), 5.0);\n    alarm_col \/= alarm_decay;\n    col += blinnPhong(mat, -rd, n, alarm_col, alarm_l);\n    \n    \/\/ fill light\n    col += blinnPhong(mat, -rd, n, vec3(0.0, 0.7, 0.25)\/(0.5*t*t), -rd);\n    \n    col *= 0.2 + 1.2*ao;    \n    return clamp(col \/ (col + 1.0), 0.0, 1.0);\n}\n\nfloat raymarch(vec3 ro, vec3 rd) {\n    float me = FAR, t = 0.0, hit = -1.0;\n    \n    for (int i = 0; i < STEPS; ++i) {\n        float d = map(ro + t*rd), e = d\/t;\n        if (e < me) {me = e; hit = t;}\n        if (me < PIX || t > FAR) break;\n        t += d;\n    }\n   \n    return me < PIX && t < FAR ? hit : -1.0;\n}\n\nmat3 lookAt(vec3 p, vec3 t) {\n    vec3 z = normalize(p - t);\n    vec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n    vec3 y = normalize(cross(z, x));\n    return mat3(x, y, z);\n}\n\nvoid camAnim(inout vec3 p, inout vec3 t) {\n    p = vec3(0.0, 0.0, 10.0-iGT);\n    p.xy -= track(p.z);\n    \n    p = mix(p, vec3(.8*sin(0.5*iGT-DOOR_QUEUE), 0.0, 2.0), smoothstep(DOOR_QUEUE-4.0, DOOR_QUEUE, iGT));\n    p.x = mix(p.x, 0.0, smoothstep(DOOR_QUEUE+2.0, DOOR_QUEUE+10.0, iGT));\n    p.z = mix(p.z, -10.0, smoothstep(DOOR_QUEUE+8.0, DOOR_QUEUE+25.0, iGT));\n   \tt = mix(vec3(0.0), vec3(0.0, 0.0, -10.0), smoothstep(DOOR_QUEUE+8.0, DOOR_QUEUE+10.0, iGT));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy\/iResolution.xy;\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) \/ iResolution.y;\n    \n    vec3 ro = vec3(0.0), tar = vec3(0.0); \n    camAnim(ro, tar);\n    vec3 rd = normalize(lookAt(ro, tar)*vec3(uv, -1.0));\n        \n    float t = raymarch(ro, rd);\n    vec3 col = t > 0.0 ? shade(ro, rd, t) : vec3(0.0);\n    \n    col = mix(vec3(0.0), col, smoothstep(0.0, 2.0, iGT));\n    col = mix(col, vec3(0.0), smoothstep(DOOR_QUEUE+10.0, DOOR_QUEUE+12.0, iGT));\n    \n    col = smoothstep(0.0, 0.7, col);\n    col *= (0.2 + 0.8*sqrt(32.0*st.x*st.y*(1.0-st.x)*(1.0-st.y)));\n    col *= 1.0 - smoothstep( 0.4, 0.41, abs(st.y-0.5) );\n    \n    col = pow(col, vec3(1.0\/2.2));\n\tfragColor = vec4(col, 1.);\n}",
        "name": "",
        "description": "",
        "type": "image"
      }
    ]
  }
},


    {
      "Shader": {
        "ver": "0.1",
        "info": {
          "id": "MscGDS",
          "date": "1451968039",
          "viewed": 202,
          "name": "State Demo",
          "username": "sixstring982",
          "description": "Demo, shows how to save \/ update general purpose state in a buffer. Click on either side of the white line to toggle states.",
          "likes": 2,
          "published": 3,
          "flags": 32,
          "tags": [ "state" ],
          "hasliked": 0
        },
        "renderpass": [
          {
            "inputs": [
              {
                "id": 257,
                "src": "\/presets\/previz\/buffer00.png",
                "ctype": "buffer",
                "channel": 0,
                "sampler": {
                  "filter": "nearest",
                  "wrap": "clamp",
                  "vflip": "true",
                  "srgb": "false",
                  "internal": "byte"
                }
              }
            ],
            "outputs": [
              {
                "id": 37,
                "channel": 0
              }
            ],
            "code": "#define RAM_SIZE 128.0\n\n\/\/ Convert a linear index to a vec2 used to \n\/\/ index into the 128 * 128 virtual \"RAM\".\nvec2 cellFromIndex(float idx) {\n    return vec2(floor(idx \/ RAM_SIZE), floor(mod(idx, RAM_SIZE))) \/ iChannelResolution[0].xy;\n}\n\n\/\/ Read a value from \"RAM\", given an index.\n\/\/ This assumes that \"RAM\" is a 128 * 128 region,\n\/\/ which gives 128 * 128 = 16384 floats of memory.\n\/\/ This function assumes that this is indexed linearly,\n\/\/ sort of like RAM would be indexed in C.\nfloat read(in float index) {\n    return texture2D(iChannel0, cellFromIndex(index)).r;\n}\n\n\/\/ This function, if you're used to game development,\n\/\/ is a little like the \"render\" function. This is where\n\/\/ all game objects should be rendered.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec4 border = vec4(1.0);\n    vec4 rest;\n    \/\/ Read float in RAM cell 345, which describes the state to exhibit.\n    if (read(345.0) < 0.5) {\n\t\trest = vec4(uv, 0.5+0.5*sin(iGlobalTime), 1.0);\n    } else {\n\t\trest = vec4(0.0, 0.0, 0.5+0.5*sin(iGlobalTime),1.0);\n    }\n    \n    fragColor = mix(border, rest, smoothstep(0.0, 1.0, abs(uv.x - 0.5) * 100.0));\n}",
            "name": "Image",
            "description": "",
            "type": "image"
          },
          {
            "inputs": [
              {
                "id": 257,
                "src": "\/presets\/previz\/buffer00.png",
                "ctype": "buffer",
                "channel": 0,
                "sampler": {
                  "filter": "nearest",
                  "wrap": "clamp",
                  "vflip": "true",
                  "srgb": "false",
                  "internal": "byte"
                }
              }
            ],
            "outputs": [
              {
                "id": 257,
                "channel": 0
              }
            ],
            "code": "\/** State Demo\n  * sixstring982 - 2016\n  * \n  * This is a demo that shows how to initialize, read, and update\n  * persistent state. Any information can be stored like this\n  * (though, storing floats is usually a good idea). Games can be\n  * created like this, too, by sampling state.\n  * \n  * A longer tutorial describing the motivation of this demo can \n  * be found at:\n  * http:\/\/lunagameserve.com\/articles\/shadertoy_ram.html\n  *\/\n\n\/\/ The number of RAM storage locations is the square\n\/\/ of this. You can increase it, but (correct me if\n\/\/ I'm wrong), your shader needs to be at least this many\n\/\/ pixels in each dimension for this to work.\n#define RAM_SIZE 128.0\n\n\/\/ Convert a linear index to a vec2 used to \n\/\/ index into the 128 * 128 virtual \"RAM\".\nvec2 cellFromIndex(float idx) {\n    return vec2(floor(idx \/ RAM_SIZE), floor(mod(idx, RAM_SIZE))) \/ iChannelResolution[0].xy;\n}\n\n\/\/ Read a value from \"RAM\", given an index.\n\/\/ This assumes that \"RAM\" is a 128 * 128 region,\n\/\/ which gives 128 * 128 = 16384 floats of memory.\n\/\/ This function assumes that this is indexed linearly,\n\/\/ sort of like RAM would be indexed in C.\nfloat read(in float index) {\n    return texture2D(iChannel0, cellFromIndex(index)).r;\n}\n\n\/\/ Checks to see if the current fragCoord is in a \n\/\/ target RAM cell. This allows checking for each\n\/\/ cell in parallel.\nbool isCell(in vec2 uv, in float index) {\n    vec2 target = cellFromIndex(index);\n    return uv.x >= target.x - 0.005 &&\n           uv.x <= target.x + 0.005 &&\n           uv.y >= target.y - 0.005 &&\n           uv.y <= target.y + 0.005;\n}\n\n\/\/ This function, if you're used to game development,\n\/\/ is a little like the \"update\" function. This is\n\/\/ where updating of all variables should be done.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \/\/ See if this particular fragment is the RAM cell\n    \/\/ we want to update\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    if (isCell(uv, 345.0)) {\n        \/\/ Initialize variable\n    \tif (iFrame == 0) {\n\t        fragColor = vec4(0.0);\n            return;\n\t    }\n        \n        \/\/ Check condition\n        if (iMouse.z \/ iResolution.x > 0.0) {\n            \/\/ Update variable\n            if (iMouse.z \/ iResolution.x > 0.5) {\n            \tfragColor = vec4(1.0);\n            } else {\n                fragColor = vec4(0.0);\n            }\n        } \n        \/\/ Set variable to previous state\n        else {\n            fragColor = vec4(read(345.0));\n        }\n    }\n}",
            "name": "Buf A",
            "description": "",
            "type": "buffer"
          }
        ]
      }
    }

      ]
}
